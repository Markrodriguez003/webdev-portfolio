import { useState, useRef, useEffect, createRef } from "react";

// STYLED COMPONENTS
import {
  FormContainer,
  SatellightContainer,
  AstronautContact,
  Satellite,
  QRCode,
} from "./ContactForm.design";

// COMPONENT
import SiteButton from "../../ui/SiteButton";

// LIBRARY
import ReCAPTCHA from "react-google-recaptcha";
import SAlert from "sweetalert2";

// SCRIPTS
import { contactUsEmail } from "../../../scripts/emailSubmission";

// ICONS
import { FaRegEnvelope } from "react-icons/fa";
import { FaTrashAlt } from "react-icons/fa";

//CSS
import "./customSweetAlertStyles.css";

// IMAGES / GIFS
import alien from "../../../assets/gifs/alien.gif";
import spaceship from "../../../assets/gifs/spaceship.gif";

// DATA
// Country JSON list
import countries from "../../../../data/countries.json";

export default function ContactForm() {
  // GOOGLE CAPTCHA REF
  const recaptcha = useRef();

  // FORM DATA SETTER + GETTER
  const [formData, setFormData] = useState({
    name: "",
    company: "",
    country: "",
    email: "",
    message: "",
    "g-recaptcha-response": "",
  });

  // HANDLES GRABBING DATA FROM FORM
  const handleChange = (event) => {
    const { name, value } = event.target;
    // console.log(`Form event:`, event, `form name:`, name, `form value:`, value);
    setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));
  };

  // CAPTURE OF CAPTCHA

  // useEffect(() => {
  //   setTimeout(() => {
  //     setCount((count) => count + 1);
  //   }, 1000);
  // });

  // ! https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js

  // HANDLE FORM SUBMISSION + EMAILJS
  const handleSubmit = async (event) => {
    event.preventDefault();
    const captchaValue = recaptcha.current.getValue();
    // console.log("FORM SUBMISSION PENDING!", captchaValue);

    if (!captchaValue) {
      SAlert.fire({
        confirmButtonColor: "black",
        customClass: {
          validationMessage: "my-validation-message",
        },
        title: "Please verify you are not a robot!",
        text: "Houston is advising to verify you're not a robot by clicking the captcha below!",
        width: 600,
        padding: "3em",
        color: "#ffffff",
        // background: `url(${alien}) rgba(0, 0, 0, 0.8)`,
        background: `rgba(0, 0, 0, 0.8)`,
        // imageWidth: 400,
        // imageHeight: 500,
        // imageAlt: "Successful message",
      });
    } else {
      const res = await fetch("http://localhost:8888/verify", {
        method: "POST",
        body: JSON.stringify({ captchaValue }),
        headers: {
          "content-type": "application/json",
        },
      });
      const data = await res.json();
      console.log(`GOOGLE CAPTCHA DATA!`, data);

      if (data.success) {
        SAlert.fire({
          confirmButtonColor: "black",
          customClass: {
            validationMessage: "my-validation-message",
          },
          title: "Form submissions successful!",
          text: "Houston..transmission successful!",
          width: 600,
          padding: "3em",
          color: "#ffffff",
          // background: `url(${alien}) rgba(0, 0, 0, 0.8)`,
          background: `rgba(0, 0, 0, 0.8)`,
          imageWidth: 400,
          imageHeight: 500,
          imageAlt: "Successful message",
        });
        // setFormData((prevFormData) => ({
        //   ...prevFormData,
        //   "g-recaptcha-response": captchaValue,
        // }));
        console.log(`Payload:`, formData);
        contactUsEmail(formData, captchaValue);
      } else {
        SAlert.fire({
          confirmButtonColor: "black",
          customClass: {
            validationMessage: "my-validation-message",
          },
          title: "reCAPTCHA validation failed!",
          text: "Houston..Something went wrong...",
          width: 600,
          padding: "3em",
          color: "#ffffff",
          background: " rgba(0, 0, 0, 0.8)",
          // background: `url(${alien}) rgba(0, 0, 0, 0.8)`,
          // imageUrl: ,
          imageWidth: 400,
          imageHeight: 900,
          imageAlt: "Message failure image",
        });
      }
    }

    //EOF
  };

  return (
    <div
      style={{
        display: "flex",
        flexDirection: "row",
      }}
    >
      <FormContainer
        onSubmit={handleSubmit}
        autoComplete="off"
        role="presentation"
        method="post"
        action=""
      >
        <label htmlFor="name">Name:</label>
        <input
          type="text"
          id="name"
          name="name"
          value={formData.name}
          onChange={handleChange}
          autoComplete="off"
          role="presentation"
          required
        />

        <label htmlFor="email">
          Company <small>(Optional)</small>:
        </label>
        <input
          type="text"
          id="company"
          name="company"
          value={formData.company}
          onChange={handleChange}
          autoComplete="off"
          role="presentation"
        />
        <label htmlFor="country">
          Country <small>(Optional)</small>:
        </label>
        <select
          name="country"
          id="country"
          value={formData.country}
          onChange={handleChange}
        >
          {countries.map((country) => {
            return (
              <option key={(`option_`, country.name)} value={country.name}>
                {country.name}
              </option>
            );
          })}
        </select>

        <label htmlFor="email">Email:</label>
        <input
          type="email"
          id="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
          autoComplete="off"
          role="presentation"
          required
        />

        <label htmlFor="message">Message:</label>
        <textarea
          id="message"
          name="message"
          value={formData.message}
          onChange={handleChange}
          required
          maxLength={150}
        />

        <div>
          <SiteButton
            type="submit"
            icon={<FaRegEnvelope />}
            title="Submit"
          ></SiteButton>
          <SiteButton
            type="button"
            icon={<FaTrashAlt />}
            title="Clear Form"
            styling="youtube"
          ></SiteButton>
        </div>
        <ReCAPTCHA
          ref={recaptcha}
          sitekey={import.meta.env.VITE_CAPTCHA_SITE_KEY}
        />
      </FormContainer>
      <SatellightContainer>
        <Satellite />
        <AstronautContact />
        {/* <QRCode></QRCode> */}
      </SatellightContainer>
    </div>
  );
}
